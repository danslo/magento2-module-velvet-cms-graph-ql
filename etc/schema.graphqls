type VelvetCmsBlock {}
input VelvetCmsBlockInput {}

type VelvetCmsPage {
    layouts: [Option!]! @resolver(class: "Danslo\\VelvetCmsGraphQl\\Model\\Resolver\\Page\\Layouts")
    custom_layouts: [Option!]! @resolver(class: "Danslo\\VelvetCmsGraphQl\\Model\\Resolver\\Page\\CustomLayouts")
    themes: [Option!]! @resolver(class: "Danslo\\VelvetCmsGraphQl\\Model\\Resolver\\Page\\Themes")
}
input VelvetCmsPageInput {}

type Query {
    cmsBlockGrid(input: GridInput): GridOutput! @resolver(class: "Danslo\\VelvetCmsGraphQl\\Model\\Resolver\\Block\\Grid")
    block(block_id: Int!): VelvetCmsBlock! @resolver(class: "Danslo\\VelvetCmsGraphQl\\Model\\Resolver\\Entity\\Loader\\CmsBlock")

    cmsPageGrid(input: GridInput): GridOutput! @resolver(class: "Danslo\\VelvetCmsGraphQl\\Model\\Resolver\\Page\\Grid")
    page(page_id: Int!): VelvetCmsPage! @resolver(class: "Danslo\\VelvetCmsGraphQl\\Model\\Resolver\\Entity\\Loader\\CmsPage")
}

type Mutation {
    saveBlock(input: VelvetCmsBlockInput!): VelvetCmsBlock! @resolver(class: "Danslo\\VelvetCmsGraphQl\\Model\\Resolver\\Entity\\Persister\\CmsBlock")
    deleteBlock(block_id: Int!): Boolean @resolver(class: "Danslo\\VelvetCmsGraphQl\\Model\\Resolver\\Entity\\Deleter\\CmsBlock")

    savePage(input: VelvetCmsPageInput!): VelvetCmsPage! @resolver(class: "Danslo\\VelvetCmsGraphQl\\Model\\Resolver\\Entity\\Persister\\CmsPage")
    deletePage(page_id: Int!): Boolean @resolver(class: "Danslo\\VelvetCmsGraphQl\\Model\\Resolver\\Entity\\Deleter\\CmsPage")
}
